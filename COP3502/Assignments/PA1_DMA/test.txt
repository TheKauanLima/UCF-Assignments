/* COP 3502C Assignment 1
This program is written by: Kauan Lima*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define STRING_SIZE 21

typedef struct Player {
    char *name; //Player name (dynamically allocated)
    int totalGoals; //Total goals scored by the player(needs to be counted based on the match)
}Player;

typedef struct Team {
    char *name; // Name of the team (dynamically allocated)
    Player **players; //An array of Player pointers where each pointer is pointing to a player
    int playerCount; // Number of players in the team
}Team;

typedef struct Goal {
    Player *scorer; // Pointer to the player who scored
    int time; // Time of the goal in minutes
}Goal;

typedef struct Match {
    Team *team1; // Pointer to Team 1
    Team *team2; // Pointer to Team 2
    Goal *goals; // Array of goals scored in the match
    int goalCount; // Total number of goals in the match
}Match;

//this is a special struct that should only be used to process a particular command (mentioned below in the function requirement)
typedef struct MatchWinnerTeam
{
    Team *winnerTeam; //pointer to the winner team if any.
    int isDraw; //set to 1 if it was a draw. In that case winnerTeam will be NULL
}MatchWinnerTeam;

Player* createPlayer(char *name)
{
    Player* p = (Player*)malloc(sizeof(Player));

    int Length = strlen(name) + 1;
    p->name = (char*)malloc(Length * sizeof(char));
    strcpy(p->name, name);

    p->totalGoals = 0;

    // printf("Player: \n%p\n", p->name);
    // for (int i = 0; i < strlen(p->name); i++)
    // {
    //     printf("%c", p->name[i]);
    // }
    // printf("\n%d\n\n", p->totalGoals);

    return p;
}

void freePlayer(Player* player)
{
    free(player->name);
    free(player);
}

Team* createTeam(char *name, int playerCount)
{
    Team* t = (Team*)malloc(sizeof(Team));

    int Length = strlen(name) + 1;
    t->name = (char*)malloc(Length * sizeof(char));
    strcpy(t->name, name);

    t->players = (Player**)malloc(playerCount * sizeof(Player*));
    t->playerCount = playerCount;

    // printf("Team: \n%p\n", t->name);
    // for (int i = 0; i < strlen(t->name); i++)
    // {
    //     printf("%c", t->name[i]);
    // }
    // printf("\n%p\n", t->players);
    // printf("%d\n\n", t->playerCount);

    return t;
}

void freeTeam(Team* team)
{
    free(team->name);
    free(team->players);
    free(team);
}

Player* getPlayerByName(char* name, Player** playerList, int numPlayers)
{
    for (int i = 0; i < numPlayers; i++)
    {
        if (strcmp(name, playerList[i]->name) != 0)
            continue;
        return playerList[i];
    }

    return NULL;
}

Team* getTeamByTeamName(Team** teamList, int numTeams, char *tname)
{
    for (int i = 0; i < numTeams; i++)
    {
        if (strcmp(tname, teamList[i]->name) != 0)
            continue;
        return teamList[i];
    }

    return NULL;
}

Match* createMatch(Match* match, Team** teamList, int numTeams, int numMatches)
{
    match = (Match*)realloc(match, numMatches * sizeof(Match));

    return match;
}

void freeMatch(Match* match)
{
    free(match);
}

void recordGoal(Match *match, Player *player, int time)
{
    match->goalCount++;

    match->goals = (Goal*)realloc(match->goals, sizeof(Goal) * (match->goalCount + 1));

    player->totalGoals++;
    match->goals[match->goalCount - 1].time = time;

    // printf("Player: \n%p\n", player->name);
    // for (int i = 0; i < strlen(player->name); i++)
    // {
    //     printf("%c", player->name[i]);
    // }
    // printf("\n%d\n\n", player->totalGoals);

    // printf("\n%d\n\n", match->goalCount);
}

int printHatTrickPlayers(Match *match)
{
    Player** pPtr = (Player**)calloc(match->goalCount, sizeof(Player*));
    int* gc = (int*)calloc(match->goalCount, sizeof(int));
    int uniquePlayers = 0;

    for (int i = 0; i < match->goalCount; i++)
    {
        int foundPlayer = 0;
        for (int j = 0; j < uniquePlayers; j++)
        {
            if (pPtr[j] == match->goals[i].scorer)
            {
                gc[j]++;
                foundPlayer = 1;
                break;
            }
        }

        if (!foundPlayer)
        {
            pPtr[uniquePlayers] = match->goals[i].scorer;
            gc[uniquePlayers] = 1;
            uniquePlayers++;
        }
    }

    int highestGoals = -1;
    int highestGoalsIndex = 0;
    int trickExists = 0;

    for (int i = 0; i < uniquePlayers; i++)
    {
        if (gc[i] >= highestGoals)
        {
            highestGoals = gc[i];
            highestGoalsIndex = i;
        }

        if (highestGoals >= 3)
        {
            trickExists = 1;
            printf("Hat trick found in %s vs %s:\n", match->team1->name, match->team2->name);
            printf("%s %d\n", match->goals[highestGoalsIndex].scorer->name, match->goals[highestGoalsIndex].scorer->totalGoals);
        }
    }

    free(pPtr);
    free(gc);
    return trickExists;
}

MatchWinnerTeam* getWinningTeam(Match *matches, int matchCount, char *team1Name, char *team2Name)
{
    MatchWinnerTeam* mwt = (MatchWinnerTeam*)malloc(sizeof(MatchWinnerTeam));
    int isMatchFound = 0;
    int team1GoalCount = 0;
    int team2GoalCount = 0;

    for (int i = 0; i < matchCount; i++)
    {
        if (strcmp(matches[i].team1->name, team1Name) == 0 && strcmp(matches[i].team2->name, team2Name) == 0)
        {
            isMatchFound = 1;
            for (int j = 0; j < matches[i].goalCount; j++)
            {
                for (int k = 0; k < matches[i].team1->playerCount; k++)
                {
                    if (matches[i].goals[j].scorer == matches[i].team1->players[k])
                    {
                        team1GoalCount++;
                        break;
                    }
                }
    
                for (int k = 0; k < matches[i].team2->playerCount; k++)
                {
                    if (matches[i].goals[j].scorer == matches[i].team2->players[k])
                    {
                        team2GoalCount++;
                        break;
                    }
                }
            }
            if (team1GoalCount > team2GoalCount)
            {
                mwt->winnerTeam = matches[i].team1;
                mwt->isDraw = 0;
            }
            else if (team1GoalCount < team2GoalCount)
            {
                mwt->winnerTeam = matches[i].team2;
                mwt->isDraw = 0;
            }
            else
            {
                mwt->winnerTeam = NULL;
                mwt->isDraw = 1;
            }
            return mwt;
        }
    }

    if (!isMatchFound)
    {
        return NULL;
    }
    
    return mwt;
}

Team* getChampion(Team **teamList, int teamCount, Match *matchList, int matchCount)
{
    int* points = (int*)calloc(teamCount, sizeof(int));
    char team1[STRING_SIZE];
    char team2[STRING_SIZE];
    
    for (int i = 0; i < teamCount; i++)
    {
        for (int j = i + 1; j < teamCount; j++)
        {
            if (strcmp(teamList[i]->name, teamList[j]->name) > 0)
            {
                strcpy(team1, teamList[j]->name);
                strcpy(team2, teamList[i]->name);
            }
            else
            {
                strcpy(team1, teamList[i]->name);
                strcpy(team2, teamList[j]->name);
            }
            
            MatchWinnerTeam* mwt = getWinningTeam(matchList, matchCount, team1, team2);

            if (mwt == NULL)
            {
                continue;
            }

            if (mwt->isDraw)
            {
                points[i]++;
                points[j]++;
            }
            else if (mwt->winnerTeam == teamList[i])
            {
                points[i] += 3;
            }
            else if (mwt->winnerTeam == teamList[j])
            {
                points[j] += 3;
            }
            free(mwt);
        }
    }

    int maxPoints = -1;
    int maxIndex = 0;

    for (int i = 0; i < teamCount; i++)
    {
        if (points[i] > maxPoints)
        {
            maxPoints = points[i];
            maxIndex = i;
        }
    }

    return teamList[maxIndex];
}

int main(void)
{
    // initialize the lengths for each loop in the program
    int numTeams = 0;
    int numMatches = 0;
    int numCmd = 0;

    scanf("%d %d %d", &numTeams, &numMatches, &numCmd);

    // declare pointer arrays
    Team* teamList[numTeams];
    Player** playerList = NULL;

    // tracker variables
    int playerInTeamCount = 0;
    int playerListCount = 0;

    // name variables
    char teamName[STRING_SIZE];
    char playerName[STRING_SIZE];

    // loop that generates specified number of teams
    for (int i = 0; i < numTeams; i++)
    {
        scanf("%s %d", teamName, &playerInTeamCount);
        teamList[i] = createTeam(teamName, playerInTeamCount);

        playerListCount += playerInTeamCount;
        playerList = (Player**)realloc(playerList, playerListCount * sizeof(Player*));

        // loop that generates specified number of players per team
        for (int j = 0; j < playerInTeamCount; j++)
        {
            scanf("%s", playerName);

            Player* p = playerList[playerListCount - playerInTeamCount + j];
            p = createPlayer(playerName);
            teamList[i]->players[j] = p;
            playerList[playerListCount - playerInTeamCount + j] = p;
        }
    }

    // for (int i = 0; i < numTeams; i++)
    // {
    //     printf("\nposition: %d -- team: %s", i, teamList[i]->name);
    //     for (int j = 0; j < teamList[i]->playerCount; j++)
    //     {
    //         printf("\n\t\tpositon: %d player: -- %s", j, teamList[i]->players[j]->name);
    //     }
    // }

    // for (int i = 0; i < playerListCount; i++)
    // {
    //     printf("\npositon: %d -- %s", i, playerList[i]->name);
    // }

    Match* matchList = NULL;
    Player* scorer;
    int time = 0;

    for (int i = 0; i < numMatches; i++)
    {
        if (matchList == NULL)
        {
            matchList = createMatch(matchList, teamList, numTeams, numMatches);
        }

        char team1[STRING_SIZE];
        char team2[STRING_SIZE];
        scanf("%s %s", team1, team2);

        matchList[i].team1 = getTeamByTeamName(teamList, numTeams, team1);
        matchList[i].team2 = getTeamByTeamName(teamList, numTeams, team2);
        matchList[i].goals = NULL;
        matchList[i].goalCount = 0;

        for (int j = 0; /* infinite loop */ ; j++)
        {
            char scorerName[STRING_SIZE];
            scanf("%s", scorerName);

            if (strcmp(scorerName, "end") == 0)
            {
                break;
            }

            scanf("%d", &time);

            if (matchList[i].goals == NULL)
            {
                matchList[i].goals = (Goal*)realloc(matchList[i].goals, sizeof(Goal) * (j+1));
            }

            matchList[i].goals[j].scorer = getPlayerByName(scorerName, matchList[i].team1->players, matchList[i].team1->playerCount);

            if (matchList[i].goals[j].scorer == NULL)
            {
                matchList[i].goals[j].scorer = getPlayerByName(scorerName, matchList[i].team2->players, matchList[i].team2->playerCount);
            }

            recordGoal(&matchList[i], matchList[i].goals[j].scorer, time);
        }
    }

    // for (int i = 0; i < numMatches; i++)
    // {
    //     printf("match: %d\n", matchList[i].goalCount);
    // }

    char cmd[STRING_SIZE];
    char team1winner[STRING_SIZE];
    char team2winner[STRING_SIZE];
    int hasOccurred = 0;

    for (int i = 0; i < numCmd; i++)
    {
        scanf("%s", cmd);

        int exists = 0;
        if (strcmp(cmd, "max_goal_player") == 0)
        {
            int maxGoals = -1;
            int maxIndex = 0;

            for (int j = 0; j < playerListCount; j++)
            {
                if (playerList[j]->totalGoals > maxGoals)
                {
                    maxGoals = playerList[j]->totalGoals;
                    maxIndex = j;
                }
            }
            printf("player with max goal %s %d\n", playerList[maxIndex]->name, playerList[maxIndex]->totalGoals);
        }
        else if (strcmp(cmd, "hattrick") == 0)
        {
            for (int j = 0; j < numMatches; j++)
            {
                exists = printHatTrickPlayers(&matchList[j]);
                if (exists == 1)
                {
                    hasOccurred = 1;
                }
            }
            if (!exists && !hasOccurred)
            {
                printf("no hat trick found in tournament\n");
            }
        }
        else if (strcmp(cmd, "winner") == 0)
        {
            scanf("%s %s", team1winner, team2winner);

            MatchWinnerTeam* mwt = getWinningTeam(matchList, numMatches, team1winner, team2winner);

            if (mwt == NULL)
            {
                printf("no match between %s and %s\n", team1winner, team2winner);
            }
            else if (mwt->isDraw)
            {
                printf("%s vs %s match drawn\n", team1winner, team2winner);
            }
            else
            {
                printf("winner of %s vs %s is %s\n", team1winner, team2winner, mwt->winnerTeam->name);
            }
            free(mwt);
        }
        else if (strcmp(cmd, "champion") == 0)
        {
            Team* champ = getChampion(teamList, numTeams, matchList, numMatches);
            printf("champion is %s", champ->name);
        }
    }

    for (int i = 0; i < numTeams; i++)
    {
        for (int j = 0; j < teamList[i]->playerCount; j++)
        {
            freePlayer(teamList[i]->players[j]);
        }
        freeTeam(teamList[i]);
    }
}